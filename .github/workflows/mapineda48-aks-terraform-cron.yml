name: Terraform Mapineda48 Cron Jobs AKS Ephemeral Cluster with Velero (Apply/Destroy)

on:
  # schedule:
  #   - cron: '0 12 * * *'   # 7:00 AM Colombia (apply) - 12:00 UTC
  #   - cron: '0 0 * * *'    # 7:00 PM Colombia (destroy) - 00:00 UTC
  workflow_dispatch:
    inputs:
      action:
        description: 'Terraform action to perform (apply/destroy/auto)'
        required: false
        default: 'auto'
        type: choice
        options: [auto, apply, destroy]

# ðŸ‘‡ IMPORTANTE: permisos para OIDC
permissions:
  id-token: write
  contents: read

jobs:
  terraform-aks:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./mapineda48.aks
    env:
      CERT_MANAGER_VERSION: v1.18.2
      VELERO_VERSION: v1.16.2
      VELERO_PLUGIN_AZURE: velero/velero-plugin-for-microsoft-azure:v1.12.2
      BACKUP_NAMESPACES: cert-manager,ingress-nginx,default
      EXTERNALDNS_CHART_VERSION: "1.18.0"     # opcional
      INGRESS_NGINX_CHART_VERSION: ""         # opcional
      USE_WORKLOAD_IDENTITY: "false"          # cambia a true si ya configuraste WI
    steps:
      - uses: actions/checkout@v4

      - uses: hashicorp/setup-terraform@v3
        with: { terraform_version: 1.7.5 }

      - name: Azure Login (OIDC)
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Sync TF_WORKDIR with PWD
        run: echo "TF_WORKDIR=$PWD" >> "$GITHUB_ENV"

      - name: Export env (ARM_* y otros)
        run: |
          {
            echo "ARM_CLIENT_ID=${{ secrets.AZURE_CLIENT_ID }}";
            echo "ARM_CLIENT_SECRET=${{ secrets.AZURE_CLIENT_SECRET }}";
            echo "ARM_SUBSCRIPTION_ID=${{ secrets.AZURE_SUBSCRIPTION_ID }}";
            echo "ARM_TENANT_ID=${{ secrets.AZURE_TENANT_ID }}";
            echo "AZURE_SUBSCRIPTION_ID=${{ secrets.AZURE_SUBSCRIPTION_ID }}";
            echo "AZURE_TENANT_ID=${{ secrets.AZURE_TENANT_ID }}";
            echo "AZURE_CLIENT_ID=${{ secrets.AZURE_CLIENT_ID }}";
            echo "AZURE_CLIENT_SECRET=${{ secrets.AZURE_CLIENT_SECRET }}";
            echo "BACKEND_RG=${{ secrets.BACKEND_RG }}";
            echo "BACKEND_STORAGE_ACCOUNT=${{ secrets.BACKEND_STORAGE_ACCOUNT }}";
            echo "BACKEND_CONTAINER_VELERO=${{ secrets.BACKEND_CONTAINER_VELERO }}";
            echo "AZURE_DNS_ZONE=${{ secrets.AZURE_DNS_ZONE }}";
            # echo "AKS_WORKLOAD_CLIENT_ID=${{ secrets.AKS_WORKLOAD_CLIENT_ID }}"; # si usas WI
          } >> "$GITHUB_ENV"

      - name: Write backend.hcl
        run: |
          cat > "$TF_WORKDIR/backend.hcl" <<EOF
          resource_group_name  = "${{ secrets.BACKEND_RG }}"
          storage_account_name = "${{ secrets.BACKEND_STORAGE_ACCOUNT }}"
          container_name       = "${{ secrets.BACKEND_CONTAINER }}"
          EOF

      - name: Make scripts executable
        run: chmod +x scripts/*.sh

      - name: Run pipeline (apply/destroy/auto)
        env:
          ACTION: ${{ inputs.action || 'auto' }}
        run: ./scripts/pipeline.sh
